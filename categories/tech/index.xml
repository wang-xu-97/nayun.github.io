<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tech on nayun blog</title><link>https://wang-xu-97.github.io/nayun.github.io/categories/tech/</link><description>Recent content in Tech on nayun blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>© 2025 nayun</copyright><lastBuildDate>Mon, 14 Jul 2025 15:39:03 +0800</lastBuildDate><atom:link href="https://wang-xu-97.github.io/nayun.github.io/categories/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>用户态、内核态内存空间</title><link>https://wang-xu-97.github.io/nayun.github.io/tech/backend/linux/%E7%94%A8%E6%88%B7%E6%80%81%E5%86%85%E6%A0%B8%E6%80%81%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4/</link><pubDate>Mon, 14 Jul 2025 15:39:03 +0800</pubDate><guid>https://wang-xu-97.github.io/nayun.github.io/tech/backend/linux/%E7%94%A8%E6%88%B7%E6%80%81%E5%86%85%E6%A0%B8%E6%80%81%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4/</guid><description>&lt;p>用户态、内核态指内存空间，CPU的各寄存器则是CPU硬件，不属于内存部分，仅在需要存档备份数据时保存至（用户态/内核态）内存&lt;br>
1、 进程内核栈&lt;br>
每个进程都有自己独立的位于内核空间的内核栈，保存进程在内核态执行的函数调用栈、局部变量、寄存器状态等数据&lt;/p>
&lt;p>linux系统切换进程时会切换&lt;/p>
&lt;ul>
&lt;li>内核栈&lt;br>
将 CPU 的栈指针寄存器 (SP/ESP/RSP, x86架构) 从指向进程 A 的内核栈顶部，修改为指向进程 B 的内核栈顶部&lt;/li>
&lt;li>页目录&lt;br>
系统切换进程时找到进程的页目录的物理基地址（mm-&amp;gt;pgd指针），写入CR3(x86)/TTBR0(ARM)寄存&lt;/li>
&lt;/ul>
&lt;p>2、进程页目录&lt;br>
存储在物理内存中，进程在创建时，系统创建mm_struct结构，用mm-&amp;gt;pgd指针保存页目录物理基地址（用来在系统切换进程时找到进程的页目录的物理基地址，写入CR3(x86)/TTBR0(ARM)寄存器，完成进程上下文切换）&lt;br>
页目录包含进程使用的全部内存的虚拟内存地址-&amp;gt;物理内存地址的映射关系&lt;br>
3、进程硬件上下文&lt;br>
运行时各寄存器的中间结果、比如PC程序计数器（下一条指令地址）、SP栈指针寄存器（当前调用栈顶）&lt;br>
切换时，这些数据被保存到进程内核栈中&lt;/p>
&lt;p>4、线程切换总是发生在同一个进程（同一个虚拟地址空间）内的线程之间。不同进程的线程之间的切换，本质上是通过上层的进程切换完成的&lt;br>
5、切换线程时只切换线程内核栈，同样CPU栈指针寄存器从指向线程A的内核栈顶-&amp;gt;B的内核栈顶。因为同属一个进程，所以不切换页目录，也即使用同一虚拟内存空间&lt;/p>
&lt;p>6、进程、线程切换都依赖内核调度器，抢占式调度（时间片、中断）&lt;br>
7、协程切换只在用户态通过程序本身调度切换，主动让出，显式让出控制权&lt;br>
8、&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>进程&lt;/th>
&lt;th>线程&lt;/th>
&lt;th>协程&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>切换内核栈、页目录&lt;/td>
&lt;td>切换内核栈&lt;/td>
&lt;td>仅切换寄存器状态&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>9、用户态进程与内核态进程 全双工通信 -&amp;gt; Netlink Socket&lt;/p>
&lt;p>相比传统 IPC (syscall, ioctl, procfs)，Netlink 具有显著优势：易于扩展、异步通信、完美支持内核模块、强大的组播能力、真正的全双工通信、开发者友好的标准 Socket API。&lt;/p>
&lt;p>单播回显: 用户请求-&amp;gt;内核处理-&amp;gt;内核响应的双向通信模式&lt;br>
内核主动组播: 内核主动向多个订阅进程广播事件的能力&lt;/p>
&lt;p>netlink属于无连接协议（无连接协议是一种通信协议，其中每个数据包的处理都是独立的，不需要在发送数据之前建立连接）&lt;/p></description></item><item><title>闭包</title><link>https://wang-xu-97.github.io/nayun.github.io/tech/general/%E9%97%AD%E5%8C%85/</link><pubDate>Mon, 14 Jul 2025 11:35:25 +0800</pubDate><guid>https://wang-xu-97.github.io/nayun.github.io/tech/general/%E9%97%AD%E5%8C%85/</guid><description>&lt;p>在创建时封装当时状态，并使当时的状态生存周期延长至与闭包生存周期一致&lt;br>
闭包思想产物：&lt;br>
1. python装饰器&lt;br>
2. 回调函数&lt;br>
3. 函数工厂&lt;br>
4. 惰性求值&lt;br>
&amp;hellip;&lt;/p>
&lt;h1 class="relative group">典型用法
&lt;div id="典型用法" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e5%85%b8%e5%9e%8b%e7%94%a8%e6%b3%95" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h1>
&lt;h2 class="relative group">1. python 装饰器
&lt;div id="1-python-装饰器" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#1-python-%e8%a3%85%e9%a5%b0%e5%99%a8" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;div class="code-block-wrapper">
&lt;div class="code-header">
&lt;span class="language-label">
&lt;span class="language-brackets">&amp;lt;/>&lt;/span>
&lt;span class="language-name">python&lt;/span>
&lt;/span>
&lt;div class="code-buttons">
&lt;button class="copy-button">
&lt;i class="fas fa-copy">&lt;/i>
&lt;span>复制&lt;/span>
&lt;/button>
&lt;/div>
&lt;/div>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="n">f&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">&lt;span class="nd">@execute&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">&lt;span class="k">def&lt;/span> &lt;span class="nf">execute_when_defined&lt;/span>&lt;span class="p">():&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;executed&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div></description></item><item><title>Outline</title><link>https://wang-xu-97.github.io/nayun.github.io/tech/outline/</link><pubDate>Mon, 14 Jul 2025 11:20:25 +0800</pubDate><guid>https://wang-xu-97.github.io/nayun.github.io/tech/outline/</guid><description>&lt;h2 class="relative group">通用编程思想
&lt;div id="通用编程思想" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e9%80%9a%e7%94%a8%e7%bc%96%e7%a8%8b%e6%80%9d%e6%83%b3" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;p>1&lt;/p>
&lt;h3 class="relative group">闭包
&lt;div id="闭包" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e9%97%ad%e5%8c%85" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h3>
&lt;p>1&lt;/p>
&lt;h3 class="relative group">多态
&lt;div id="多态" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e5%a4%9a%e6%80%81" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h3>
&lt;p>1&lt;br>
1&lt;br>
1&lt;br>
1&lt;br>
1&lt;br>
1&lt;br>
1&lt;br>
1&lt;/p>
&lt;h2 class="relative group">前端
&lt;div id="前端" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e5%89%8d%e7%ab%af" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;h3 class="relative group">hugo
&lt;div id="hugo" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#hugo" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h3>
&lt;h2 class="relative group">后端
&lt;div id="后端" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e5%90%8e%e7%ab%af" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h2>
&lt;h3 class="relative group">Linux理解
&lt;div id="linux理解" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#linux%e7%90%86%e8%a7%a3" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h3>
&lt;h4 class="relative group">用户态、内核态内存空间
&lt;div id="用户态内核态内存空间" class="anchor">&lt;/div>
&lt;span
class="absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100">
&lt;a class="group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline" href="#%e7%94%a8%e6%88%b7%e6%80%81%e5%86%85%e6%a0%b8%e6%80%81%e5%86%85%e5%ad%98%e7%a9%ba%e9%97%b4" aria-label="锚点">#&lt;/a>
&lt;/span>
&lt;/h4>
&lt;p>1&lt;br>
1&lt;br>
1&lt;br>
1&lt;br>
1&lt;br>
1&lt;br>
1&lt;br>
1&lt;br>
1&lt;br>
1&lt;br>
1&lt;br>
1&lt;br>
1&lt;br>
1&lt;br>
1&lt;br>
1&lt;/p></description></item></channel></rss>